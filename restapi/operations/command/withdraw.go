package command

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// WithdrawHandlerFunc turns a function with the right signature into a withdraw handler
type WithdrawHandlerFunc func(WithdrawParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WithdrawHandlerFunc) Handle(params WithdrawParams) middleware.Responder {
	return fn(params)
}

// WithdrawHandler interface for that can handle valid withdraw params
type WithdrawHandler interface {
	Handle(WithdrawParams) middleware.Responder
}

// NewWithdraw creates a new http.Handler for the withdraw operation
func NewWithdraw(ctx *middleware.Context, handler WithdrawHandler) *Withdraw {
	return &Withdraw{Context: ctx, Handler: handler}
}

/*Withdraw swagger:route POST /withdraw command withdraw

money withdraw

*/
type Withdraw struct {
	Context *middleware.Context
	Handler WithdrawHandler
}

func (o *Withdraw) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWithdrawParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
