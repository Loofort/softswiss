package command

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// TransferHandlerFunc turns a function with the right signature into a transfer handler
type TransferHandlerFunc func(TransferParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TransferHandlerFunc) Handle(params TransferParams) middleware.Responder {
	return fn(params)
}

// TransferHandler interface for that can handle valid transfer params
type TransferHandler interface {
	Handle(TransferParams) middleware.Responder
}

// NewTransfer creates a new http.Handler for the transfer operation
func NewTransfer(ctx *middleware.Context, handler TransferHandler) *Transfer {
	return &Transfer{Context: ctx, Handler: handler}
}

/*Transfer swagger:route POST /transfer command transfer

transfer money from one account to another

*/
type Transfer struct {
	Context *middleware.Context
	Handler TransferHandler
}

func (o *Transfer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewTransferParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
