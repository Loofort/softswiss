package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

// AccountRegistartionHandlerFunc turns a function with the right signature into a account registartion handler
type AccountRegistartionHandlerFunc func(AccountRegistartionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AccountRegistartionHandlerFunc) Handle(params AccountRegistartionParams) middleware.Responder {
	return fn(params)
}

// AccountRegistartionHandler interface for that can handle valid account registartion params
type AccountRegistartionHandler interface {
	Handle(AccountRegistartionParams) middleware.Responder
}

// NewAccountRegistartion creates a new http.Handler for the account registartion operation
func NewAccountRegistartion(ctx *middleware.Context, handler AccountRegistartionHandler) *AccountRegistartion {
	return &AccountRegistartion{Context: ctx, Handler: handler}
}

/*AccountRegistartion swagger:route POST /account resource accountRegistartion

create a new account

*/
type AccountRegistartion struct {
	Context *middleware.Context
	Handler AccountRegistartionHandler
}

func (o *AccountRegistartion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewAccountRegistartionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

/*AccountRegistartionBody AccountRegistartionBody account registartion body

swagger:model AccountRegistartionBody
*/
type AccountRegistartionBody struct {

	/* money amount

	Required: true
	*/
	Amount float32 `json:"amount,omitempty"`
}

// Validate validates this account registartion body
func (o *AccountRegistartionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccountRegistartionBody) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"amount", "body", float32(o.Amount)); err != nil {
		return err
	}

	return nil
}
