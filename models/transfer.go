package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*transfer Transfer transfer

swagger:model transfer
*/
type Transfer struct {

	/* amount of money to transfer

	Required: true
	Minimum: 1
	*/
	Amount float32 `json:"amount,omitempty"`

	/* source account id

	Required: true
	*/
	From int64 `json:"from,omitempty"`

	/* destination account id

	Required: true
	*/
	To int64 `json:"to,omitempty"`
}

// Validate validates this transfer
func (m *Transfer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transfer) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", float32(m.Amount)); err != nil {
		return err
	}

	if err := validate.Minimum("amount", "body", float64(m.Amount), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Transfer) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", int64(m.From)); err != nil {
		return err
	}

	return nil
}

func (m *Transfer) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", int64(m.To)); err != nil {
		return err
	}

	return nil
}
